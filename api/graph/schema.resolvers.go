package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"github.com/sigmawq/grpc-service/api/graph/model"
	"log"
)

// Dummy is the resolver for the dummy field.
func (r *mutationResolver) Dummy(ctx context.Context, b bool) (bool, error) {
	panic(fmt.Errorf("not implemented: Dummy - dummy"))
}

// Retrieve is the resolver for the retrieve field.
func (r *queryResolver) Retrieve(ctx context.Context, search string, from int, size int) ([]*model.Data, error) {
	data, err := client.Retrieve(search, int32(from), int32(size))
	if err != nil {
		return nil, err
	}

	result := make([]*model.Data, 0)
	for _, value := range data {
		value := model.Data{
			ID:          value.Id,
			Subcategory: value.Subcategory,
			TitleRo:     value.TitleRo,
			TitleRu:     value.TitleRu,
			Type:        value.Type,
			Posted:      value.Posted,
		}

		result = append(result, &value)
	}

	return result, nil
}

// Aggregate is the resolver for the aggregate field.
func (r *queryResolver) Aggregate(ctx context.Context) ([]*model.AggregationCategory, error) {
	data, err := client.Aggregate()
	if err != nil {
		//TODO:
		log.Printf("Aggregate failed: %v", err)
		return nil, err
	}

	result := make([]*model.AggregationCategory, 0)
	for _, value := range data {
		value := model.AggregationCategory{
			DocCount: int(value.DocCount),
			Key:      value.Key,
		}

		result = append(result, &value)
	}

	return result, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
